const fs = require("fs");
const path = require("path");

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file blogs.json
const BLOGS_FILE = path.join(process.cwd(), "data", "blogs.json");

// Function ƒë·ªÉ test h·ªá th·ªëng like
function testLikeSystem() {
  try {
    if (!fs.existsSync(BLOGS_FILE)) {
      console.log("‚ùå File blogs.json kh√¥ng t·ªìn t·∫°i!");
      return;
    }

    const data = fs.readFileSync(BLOGS_FILE, "utf8");
    const blogs = JSON.parse(data);

    console.log("üß™ Test h·ªá th·ªëng Like/Unlike");
    console.log("=" .repeat(50));

    blogs.slice(0, 3).forEach((blog, index) => {
      console.log(`\nüìù B√†i ${index + 1}: ${blog.title}`);
      console.log(`   üë• L∆∞·ª£t th√≠ch hi·ªán t·∫°i: ${blog.likes}`);
      console.log(`   üìÖ C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: ${new Date(blog.updatedAt).toLocaleString('vi-VN')}`);
    });

    console.log("\n" + "=" .repeat(50));
    console.log("‚úÖ H·ªá th·ªëng Like/Unlike ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:");
    console.log("   ‚Ä¢ M·ªói ng∆∞·ªùi ch·ªâ c√≥ th·ªÉ like 1 l·∫ßn m·ªói b√†i vi·∫øt");
    console.log("   ‚Ä¢ Like l·∫ßn th·ª© 2 s·∫Ω unlike (b·ªè th√≠ch)");
    console.log("   ‚Ä¢ Tr·∫°ng th√°i like ƒë∆∞·ª£c l∆∞u trong localStorage");
    console.log("   ‚Ä¢ Giao di·ªán thay ƒë·ªïi m√†u s·∫Øc theo tr·∫°ng th√°i like");
    console.log("   ‚Ä¢ API h·ªó tr·ª£ c·∫£ like v√† unlike");

    console.log("\nüé® Giao di·ªán:");
    console.log("   ‚Ä¢ ‚ù§Ô∏è M√†u ƒë·ªè + fill: ƒê√£ th√≠ch");
    console.log("   ‚Ä¢ ü§ç M√†u x√°m: Ch∆∞a th√≠ch");
    console.log("   ‚Ä¢ Hover: Chuy·ªÉn sang m√†u ƒë·ªè");

    console.log("\nüíæ L∆∞u tr·ªØ:");
    console.log("   ‚Ä¢ localStorage key: 'likedBlogs'");
    console.log("   ‚Ä¢ Format: Array of blog IDs");
    console.log("   ‚Ä¢ T·ª± ƒë·ªông sync gi·ªØa c√°c tab");

  } catch (error) {
    console.error("‚ùå L·ªói khi test like system:", error);
  }
}

// Function ƒë·ªÉ reset like counts (n·∫øu c·∫ßn)
function resetLikeCounts() {
  try {
    if (!fs.existsSync(BLOGS_FILE)) {
      console.log("‚ùå File blogs.json kh√¥ng t·ªìn t·∫°i!");
      return;
    }

    const data = fs.readFileSync(BLOGS_FILE, "utf8");
    const blogs = JSON.parse(data);

    const updatedBlogs = blogs.map(blog => ({
      ...blog,
      likes: 0,
      updatedAt: new Date().toISOString()
    }));

    fs.writeFileSync(BLOGS_FILE, JSON.stringify(updatedBlogs, null, 2));
    console.log("üîÑ ƒê√£ reset t·∫•t c·∫£ like counts v·ªÅ 0");
  } catch (error) {
    console.error("‚ùå L·ªói khi reset like counts:", error);
  }
}

// Function ƒë·ªÉ t·∫°o sample data v·ªõi like counts
function createSampleLikes() {
  try {
    if (!fs.existsSync(BLOGS_FILE)) {
      console.log("‚ùå File blogs.json kh√¥ng t·ªìn t·∫°i!");
      return;
    }

    const data = fs.readFileSync(BLOGS_FILE, "utf8");
    const blogs = JSON.parse(data);

    const updatedBlogs = blogs.map((blog, index) => ({
      ...blog,
      likes: Math.floor(Math.random() * 20) + 1, // Random 1-20 likes
      updatedAt: new Date().toISOString()
    }));

    fs.writeFileSync(BLOGS_FILE, JSON.stringify(updatedBlogs, null, 2));
    console.log("üé≤ ƒê√£ t·∫°o sample like counts cho t·∫•t c·∫£ b√†i vi·∫øt");
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o sample likes:", error);
  }
}

// Ch·∫°y test
if (require.main === module) {
  const action = process.argv[2];
  
  switch (action) {
    case 'test':
      testLikeSystem();
      break;
    case 'reset':
      resetLikeCounts();
      break;
    case 'sample':
      createSampleLikes();
      break;
    default:
      console.log("Usage:");
      console.log("  node scripts/test-like-system.js test    - Test h·ªá th·ªëng like");
      console.log("  node scripts/test-like-system.js reset   - Reset t·∫•t c·∫£ like counts");
      console.log("  node scripts/test-like-system.js sample  - T·∫°o sample like counts");
  }
}

module.exports = { testLikeSystem, resetLikeCounts, createSampleLikes };
