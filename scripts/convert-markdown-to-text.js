const fs = require("fs");
const path = require("path");

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file blogs.json
const BLOGS_FILE = path.join(process.cwd(), "data", "blogs.json");

// Function ƒë·ªÉ chuy·ªÉn ƒë·ªïi markdown th√†nh vƒÉn b·∫£n b√¨nh th∆∞·ªùng
function markdownToText(markdown) {
  return markdown
    .replace(/^#{1,6}\s+/gm, "") // Lo·∫°i b·ªè headers
    .replace(/\*\*(.*?)\*\*/g, "$1") // Lo·∫°i b·ªè bold
    .replace(/\*(.*?)\*/g, "$1") // Lo·∫°i b·ªè italic
    .replace(/`(.*?)`/g, "$1") // Lo·∫°i b·ªè code
    .replace(/\[([^\]]+)\]\([^)]+\)/g, "$1") // Lo·∫°i b·ªè links
    .replace(/^\s*[-*+]\s+/gm, "‚Ä¢ ") // Chuy·ªÉn list items th√†nh bullet points
    .replace(/^\s*\d+\)\s+/gm, "") // Lo·∫°i b·ªè numbered lists
    .replace(/\|/g, "") // Lo·∫°i b·ªè table separators
    .replace(/^---+$/gm, "") // Lo·∫°i b·ªè horizontal rules
    .replace(/\n{3,}/g, "\n\n") // Gi·∫£m multiple newlines
    .trim();
}

// Function ƒë·ªÉ convert t·∫•t c·∫£ blog posts t·ª´ markdown sang text
function convertMarkdownToText() {
  try {
    // ƒê·ªçc file blogs.json
    if (!fs.existsSync(BLOGS_FILE)) {
      console.log("‚ùå File blogs.json kh√¥ng t·ªìn t·∫°i!");
      return 0;
    }

    const data = fs.readFileSync(BLOGS_FILE, "utf8");
    const blogs = JSON.parse(data);

    let convertedCount = 0;

    // Convert t·ª´ng blog post
    const updatedBlogs = blogs.map((blog) => {
      const originalContent = blog.content;
      const convertedContent = markdownToText(originalContent);

      if (originalContent !== convertedContent) {
        convertedCount++;
        console.log(`‚úÖ ƒê√£ convert: ${blog.title}`);
      }

      return {
        ...blog,
        content: convertedContent,
        updatedAt: new Date().toISOString(),
      };
    });

    // Ghi l·∫°i file
    fs.writeFileSync(BLOGS_FILE, JSON.stringify(updatedBlogs, null, 2));

    console.log(
      `\nüéâ ƒê√£ convert th√†nh c√¥ng ${convertedCount} b√†i vi·∫øt t·ª´ markdown sang vƒÉn b·∫£n b√¨nh th∆∞·ªùng!`
    );
    console.log(`üìö T·ªïng s·ªë b√†i vi·∫øt: ${updatedBlogs.length}`);

    return convertedCount;
  } catch (error) {
    console.error("‚ùå L·ªói khi convert blog posts:", error);
    return 0;
  }
}

// Function ƒë·ªÉ backup file g·ªëc tr∆∞·ªõc khi convert
function backupOriginalFile() {
  try {
    if (fs.existsSync(BLOGS_FILE)) {
      const backupFile = BLOGS_FILE.replace(
        ".json",
        `_backup_${Date.now()}.json`
      );
      fs.copyFileSync(BLOGS_FILE, backupFile);
      console.log(`üìÅ ƒê√£ backup file g·ªëc: ${backupFile}`);
      return backupFile;
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi backup file:", error);
  }
  return null;
}

// Ch·∫°y convert
if (require.main === module) {
  const action = process.argv[2];

  if (action === "convert") {
    console.log("üîÑ B·∫Øt ƒë·∫ßu convert markdown sang vƒÉn b·∫£n b√¨nh th∆∞·ªùng...");
    backupOriginalFile();
    convertMarkdownToText();
  } else if (action === "preview") {
    // Preview m·ªôt v√†i b√†i vi·∫øt ƒë·ªÉ xem k·∫øt qu·∫£
    try {
      const data = fs.readFileSync(BLOGS_FILE, "utf8");
      const blogs = JSON.parse(data);

      console.log("üìñ Preview m·ªôt v√†i b√†i vi·∫øt:");
      blogs.slice(0, 3).forEach((blog, index) => {
        console.log(`\n--- B√†i ${index + 1}: ${blog.title} ---`);
        console.log("N·ªôi dung g·ªëc (markdown):");
        console.log(blog.content.substring(0, 200) + "...");
        console.log("\nN·ªôi dung sau convert (text):");
        console.log(markdownToText(blog.content).substring(0, 200) + "...");
      });
    } catch (error) {
      console.error("‚ùå L·ªói khi preview:", error);
    }
  } else {
    console.log("Usage:");
    console.log(
      "  node scripts/convert-markdown-to-text.js convert  - Convert t·∫•t c·∫£ b√†i vi·∫øt"
    );
    console.log(
      "  node scripts/convert-markdown-to-text.js preview  - Xem preview k·∫øt qu·∫£"
    );
  }
}

module.exports = { convertMarkdownToText, markdownToText, backupOriginalFile };
