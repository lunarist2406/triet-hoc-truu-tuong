const fs = require("fs");
const path = require("path");

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file blog-comments.json
const BLOG_COMMENTS_FILE = path.join(process.cwd(), "data", "blog-comments.json");

// Function ƒë·ªÉ test h·ªá th·ªëng comment
function testBlogCommentSystem() {
  try {
    if (!fs.existsSync(BLOG_COMMENTS_FILE)) {
      console.log("‚ùå File blog-comments.json kh√¥ng t·ªìn t·∫°i!");
      return;
    }

    const data = fs.readFileSync(BLOG_COMMENTS_FILE, "utf8");
    const comments = JSON.parse(data);

    console.log("üí¨ Test h·ªá th·ªëng Blog Comments");
    console.log("=" .repeat(50));

    if (comments.length === 0) {
      console.log("üìù Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o");
    } else {
      comments.forEach((comment, index) => {
        console.log(`\nüí¨ B√¨nh lu·∫≠n ${index + 1}:`);
        console.log(`   üë§ T√°c gi·∫£: ${comment.author}`);
        console.log(`   üìù N·ªôi dung: ${comment.content.substring(0, 50)}...`);
        console.log(`   üìÖ Th·ªùi gian: ${new Date(comment.timestamp).toLocaleString('vi-VN')}`);
        console.log(`   üìö Blog ID: ${comment.blogId}`);
        console.log(`   üí¨ Tr·∫£ l·ªùi: ${comment.replies ? comment.replies.length : 0}`);
      });
    }

    console.log("\n" + "=" .repeat(50));
    console.log("‚úÖ H·ªá th·ªëng Blog Comments ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:");
    console.log("   ‚Ä¢ Layout Facebook-style: N·ªôi dung b√™n tr√°i, b√¨nh lu·∫≠n b√™n ph·∫£i");
    console.log("   ‚Ä¢ Modal r·ªông h∆°n (max-w-7xl) ƒë·ªÉ ch·ª©a split view");
    console.log("   ‚Ä¢ Comment system compact v√† responsive");
    console.log("   ‚Ä¢ H·ªó tr·ª£ nested replies (t·ªëi ƒëa 3 c·∫•p)");
    console.log("   ‚Ä¢ Real-time updates v√† animations");

    console.log("\nüé® Giao di·ªán m·ªõi:");
    console.log("   ‚Ä¢ Split view: 60% n·ªôi dung, 40% b√¨nh lu·∫≠n");
    console.log("   ‚Ä¢ Comment form ·ªü ƒë·∫ßu sidebar");
    console.log("   ‚Ä¢ Comments list scrollable");
    console.log("   ‚Ä¢ Compact design cho mobile");

    console.log("\nüîß API Endpoints:");
    console.log("   ‚Ä¢ GET /api/blog-comments?blogId=xxx - L·∫•y comments");
    console.log("   ‚Ä¢ POST /api/blog-comments - T·∫°o comment m·ªõi");
    console.log("   ‚Ä¢ DELETE /api/blog-comments/[id] - X√≥a comment");

  } catch (error) {
    console.error("‚ùå L·ªói khi test blog comment system:", error);
  }
}

// Function ƒë·ªÉ t·∫°o sample comments
function createSampleComments() {
  try {
    if (!fs.existsSync(BLOG_COMMENTS_FILE)) {
      console.log("‚ùå File blog-comments.json kh√¥ng t·ªìn t·∫°i!");
      return;
    }

    // L·∫•y blog ID ƒë·∫ßu ti√™n t·ª´ blogs.json
    const blogsFile = path.join(process.cwd(), "data", "blogs.json");
    if (!fs.existsSync(blogsFile)) {
      console.log("‚ùå File blogs.json kh√¥ng t·ªìn t·∫°i!");
      return;
    }

    const blogsData = fs.readFileSync(blogsFile, "utf8");
    const blogs = JSON.parse(blogsData);
    
    if (blogs.length === 0) {
      console.log("‚ùå Kh√¥ng c√≥ blog n√†o ƒë·ªÉ t·∫°o comments!");
      return;
    }

    const blogId = blogs[0].id;
    const sampleComments = [
      {
        id: "comment-1",
        blogId: blogId,
        author: "Nguy·ªÖn VƒÉn A",
        content: "B√†i vi·∫øt r·∫•t hay v√† b·ªï √≠ch! C·∫£m ∆°n t√°c gi·∫£ ƒë√£ chia s·∫ª.",
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 gi·ªù tr∆∞·ªõc
        parentId: null,
        replies: [
          {
            id: "reply-1",
            blogId: blogId,
            author: "Tr·∫ßn Th·ªã B",
            content: "T√¥i c≈©ng th·∫•y v·∫≠y! R·∫•t h·ªØu √≠ch cho vi·ªác h·ªçc t·∫≠p.",
            timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), // 1 gi·ªù tr∆∞·ªõc
            parentId: "comment-1",
            replies: []
          }
        ]
      },
      {
        id: "comment-2",
        blogId: blogId,
        author: "L√™ VƒÉn C",
        content: "C√≥ th·ªÉ gi·∫£i th√≠ch th√™m v·ªÅ ph·∫ßn n√†y kh√¥ng? T√¥i ch∆∞a hi·ªÉu r√µ l·∫Øm.",
        timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(), // 30 ph√∫t tr∆∞·ªõc
        parentId: null,
        replies: []
      },
      {
        id: "comment-3",
        blogId: blogId,
        author: "Ph·∫°m Th·ªã D",
        content: "Tuy·ªát v·ªùi! T√¥i ƒë√£ h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÅu t·ª´ b√†i vi·∫øt n√†y.",
        timestamp: new Date(Date.now() - 10 * 60 * 1000).toISOString(), // 10 ph√∫t tr∆∞·ªõc
        parentId: null,
        replies: []
      }
    ];

    fs.writeFileSync(BLOG_COMMENTS_FILE, JSON.stringify(sampleComments, null, 2));
    console.log("üé≤ ƒê√£ t·∫°o 3 sample comments cho blog ƒë·∫ßu ti√™n");
    console.log(`üìö Blog ID: ${blogId}`);
    console.log(`üìù T·ªïng comments: ${sampleComments.length}`);
    console.log(`üí¨ T·ªïng replies: ${sampleComments.reduce((total, comment) => total + comment.replies.length, 0)}`);

  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o sample comments:", error);
  }
}

// Function ƒë·ªÉ x√≥a t·∫•t c·∫£ comments
function clearAllComments() {
  try {
    fs.writeFileSync(BLOG_COMMENTS_FILE, "[]", "utf8");
    console.log("üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ comments");
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a comments:", error);
  }
}

// Ch·∫°y test
if (require.main === module) {
  const action = process.argv[2];
  
  switch (action) {
    case 'test':
      testBlogCommentSystem();
      break;
    case 'sample':
      createSampleComments();
      break;
    case 'clear':
      clearAllComments();
      break;
    default:
      console.log("Usage:");
      console.log("  node scripts/test-blog-comments.js test    - Test h·ªá th·ªëng comment");
      console.log("  node scripts/test-blog-comments.js sample  - T·∫°o sample comments");
      console.log("  node scripts/test-blog-comments.js clear   - X√≥a t·∫•t c·∫£ comments");
  }
}

module.exports = { testBlogCommentSystem, createSampleComments, clearAllComments };
